#########################################
# PUBLIC MACROS: FEEL FREE TO CHANGE THEM
#########################################

# represents the folder, relative to the projhect root directory, where to put the pdf and all the metadata generated by latex
BUILD_FOLDER ?= build
#Fodler containing all the releases generated by "make release"
RELEASE_FOLDER ?= releases
# represents the software represenitng the latex compiler to use
LATEX_CC ?= pdflatex
# represents the software that we will call to build the bibliography
BIBTEX_CC ?= bibtex
# the Latex root source code document that will be use as starting point of the latex build process
# The filename is relative to the project root directory
# No ".tex" extension is needed since it will be automatically appended (e.g., `main.tex` should be written as `main`)
MAIN_SRC ?= main
# name of the output that will be generated inside BUILD_FOLDER. No extension is needed (e.g., `main.pdf` should be written as `main`)
OUTPUT_NAME ?= main
# name of the file that will be generated inside RELEASE_FOLDER when a release document is added. Note that we will append to such name the version automatically
RELEASE_NAME ?= $(OUTPUT_NAME)
# Additional latex flags that will be used in the build process. Note that -halt-on-error and -output-directory are automatically added
# to the build process
LATEX_FLAGS ?= 
# Additional latex flags that will be used in the build process when building the bibliography
BIBTEX_FLAGS ?= -quiet

#########################################
# PROTECTED MACROS
#########################################

# a semantic version string representing the versioning of the build process
# Follows a quick changelog:
# 1.0 first version
TEMPLATE_VERSION:=1.0
# Some additional regarding the alteration of the build process. Use this to convey to other people your build process customizations (i.e., you have edit the internal details of this file)
NOTES:=no notes
LATEXT_STANDARD_FLAGS:=-interaction=nonstopmode -halt-on-error -output-directory=$(BUILD_FOLDER)
#A file containing the version we want to apply
VERSION_FILE:=.version
#List of options to pass to colorize.py script
COLORIZE_MAPPING:= \
	--map 'r"(.*\W*Warning\W+.+)"' 'YELLOW + r"\1" + RESET' \
	--map 'r"(.*\W*Overfull\W+.+)"' 'YELLOW + r"\1" + RESET' \
	--map 'r"(.*\W*Underfull\W+.+)"' 'YELLOW + r"\1" + RESET' \
	--map 'r"Error"' 'BOLD_RED + "Error" + RESET' \
	--map 'r"(.*\W*Undefined control sequence.*)"' 'BOLD_RED + r"\1" + RESET' \
	--map 'r"^(.*\W*error\W+.+)"' 'BOLD_RED + r"\1" + RESET' \
	--map 'r"^(.*A bad cross reference.*)"' 'YELLOW + r"\1" + RESET' \
	--map 'r"^(refers to entry .+, which doesn.t exist)"' 'YELLOW + r"\1" + RESET' \


#########################################
# INTERNAL DETAILS
#########################################

DEFAULT:="\e[0m"
GREEN:="\e[32m"
YELLOW:="\e[33m"
RED:="\e[31m"
BLUE:="\e[34m"
CYAN:="\e[36m"
BOLD_RED:="\e[1;31m"
BOLD_BLUE:="\e[1;34m"
BOLD_GREEN:="\e[1;32m"

.DEFAULT_GOAL:=all

.phony: show-info show-variables all clean check-commands fast help release

help:
	@echo "Targets are:"
	@echo " - show-info: allows you to determine the version of this build process plus some information the original developer has left you: such notes refer to changes the original developer has made to this build process"
	@echo " - show-variables: print a list of variables (and their default values) you can tweak from the command line"
	@echo " - check-commnds: check if the system has installed all the required command in order for the build process to complete"
	@echo " - all [DEFAULT]: build the pdf file using the 2 full compilations, one bibtex call and another latex compile run. Slow but generates the correct pdf"
	@echo " - fast: build the pdf only by calling latex once. Fast but if new references have been added, this command may leave some references undefined."
	@echo " - release: like 'all' but we will create a pdf in the release directory with a semantic versioning. Useful to keep track a versioning without git."
	@echo " - clean: claer all the contents of build directory"
	@echo " - help: shows this message"

check-commands:
	@$(if $(shell which echo),echo $(BOLD_BLUE)"echo command: $(shell which echo)"$(DEFAULT),echo $(BOLD_RED)"Required 'echo' command not found"$(DEFAULT) && /bin/false) 
	@$(if $(shell which test),echo $(BOLD_BLUE)"test command: $(shell which test)"$(DEFAULT),echo $(BOLD_RED)"Required 'test' command not found"$(DEFAULT) && /bin/false) 
	@$(if $(shell which rm),echo $(BOLD_BLUE)"rm command: $(shell which rm)"$(DEFAULT),echo $(BOLD_RED)"Required 'rm' command not found"$(DEFAULT) && /bin/false)
	@$(if $(shell which cp),echo $(BOLD_BLUE)"cp command: $(shell which cp)"$(DEFAULT),echo $(BOLD_RED)"Required 'cp' command not found"$(DEFAULT) && /bin/false)
	@$(if $(shell which mv),echo $(BOLD_BLUE)"mv command: $(shell which mv)"$(DEFAULT),echo $(BOLD_RED)"Required 'mv' command not found"$(DEFAULT) && /bin/false)
	@$(if $(shell which cat),echo $(BOLD_BLUE)"cat command: $(shell which cat)"$(DEFAULT),echo $(BOLD_RED)"Required 'cat' command not found"$(DEFAULT) && /bin/false)
	@$(if $(shell which touch),echo $(BOLD_BLUE)"touch command: $(shell which touch)"$(DEFAULT),echo $(BOLD_RED)"Required 'touch' command not found"$(DEFAULT) && /bin/false) 
	@$(if $(shell which python3),echo $(BOLD_BLUE)"python3 command: $(shell which python3)"$(DEFAULT),echo $(BOLD_RED)"Required 'python3' command not found"$(DEFAULT) && /bin/false) 
	@$(if $(shell which $(LATEX_CC)),echo $(BOLD_BLUE)"$(LATEX_CC) command: $(shell which $(LATEX_CC))"$(DEFAULT),echo $(BOLD_RED)"Required '$(LATEX_CC)' command not found"$(DEFAULT) && /bin/false) 
	@$(if $(shell which $(BIBTEX_CC)),echo $(BOLD_BLUE)"$(BIBTEX_CC) command: $(shell which $(BIBTEX_CC))"$(DEFAULT),echo $(BOLD_RED)"Required '$(BIBTEX_CC)' command not found"$(DEFAULT) && /bin/false) 

show-variables:
	@echo "You can set these variables from the command line. For instance:"
	@echo " make OUTPUT_NAME=\"thesis\" RELEASE_NAME=\"final\" release"
	@echo ""
	@echo " - "$(BLUE)"BUILD_FOLDER"$(DEFAULT)"[defaults to "$(BLUE)$(BUILD_FOLDER)$(DEFAULT)"]: represents the folder, relative to the project root directory, where to put the pdf and all the metadata generated by latex. Cleaned with \`make clean\`"
	@echo " - "$(BLUE)"RELEASE_FOLDER"$(DEFAULT)"[defaults to "$(BLUE)$(RELEASE_FOLDER)$(DEFAULT)"]: Folder containing all the releases generated by \`make release\`"
	@echo " - "$(BLUE)"LATEX_CC"$(DEFAULT)"[defaults to "$(BLUE)$(LATEX_CC)$(DEFAULT)"]: represents the software represenitng the latex compiler to use"
	@echo " - "$(BLUE)"BIBTEX_CC"$(DEFAULT)"[defaults to "$(BLUE)$(BIBTEX_CC)$(DEFAULT)"]: represents the software that we will call to build the bibliography"
	@echo " - "$(BLUE)"MAIN_SRC"$(DEFAULT)"[defaults to "$(BLUE)$(MAIN_SRC)$(DEFAULT)"]: the Latex root source code document that will be use as starting point of the latex build process. The filename is relative to the project root directory. No \".tex\" extension is needed since it will be automatically appended (e.g., \`main.tex\` should be written as \`main\`)"
	@echo " - "$(BLUE)"OUTPUT_NAME"$(DEFAULT)"[defaults to "$(BLUE)$(OUTPUT_NAME)$(DEFAULT)"]: name of the output that will be generated inside BUILD_FOLDER. No extension is needed (e.g., \`main.pdf\` should be written as \`main\`)"
	@echo " - "$(BLUE)"RELEASE_NAME"$(DEFAULT)"[defaults to "$(BLUE)$(RELEASE_NAME)$(DEFAULT)"]: name of the file that will be generated inside RELEASE_FOLDER when a release document is added. Note that we will append to such name the version automatically"
	@echo " - "$(BLUE)"LATEX_FLAGS"$(DEFAULT)"[defaults to "$(BLUE)$(LATEX_FLAGS)$(DEFAULT)"]: Additional latex flags that will be used in the build process. Note that $(LATEXT_STANDARD_FLAGS) are automatically added to the build process"
	@echo " - "$(BLUE)"BIBTEX_FLAGS"$(DEFAULT)"[defaults to "$(BLUE)$(BIBTEX_FLAGS)$(DEFAULT)"]: Additional latex flags that will be used in the build process when building the bibliography"

show-info:
	@echo $(BOLD_BLUE)"Latex Template version is "$(TEMPLATE_VERSION)$(DEFAULT)
	@echo "Notes from the developer regarding some notoriuos change in this file: "
	@echo "$(NOTES)"

fast: check-commands show-info 
	@echo $(BOLD_BLUE)"Compiling one time..."$(DEFAULT)
	$(LATEX_CC) $(LATEXT_STANDARD_FLAGS) $(LATEX_FLAGS) $(MAIN_SRC).tex 2>&1 | ./colorize.py $(COLORIZE_MAPPING) || { echo $(BOLD_RED)"FAILURE!"$(DEFAULT); exit 1; }

	@if test "$(BUILD_FOLDER)/$(MAIN_SRC).pdf" != "$(BUILD_FOLDER)/$(OUTPUT_NAME).pdf"; then	mv -v $(BUILD_FOLDER)/$(MAIN_SRC).pdf $(BUILD_FOLDER)/$(OUTPUT_NAME).pdf; fi

	@echo $(BOLD_GREEN)"DONE COMPILING. Check $(BUILD_FOLDER)/$(OUTPUT_NAME).pdf"$(DEFAULT)

all: check-commands show-info
	@echo $(BOLD_BLUE)"Compiling first time..."$(DEFAULT)
	$(LATEX_CC) $(LATEXT_STANDARD_FLAGS) $(LATEX_FLAGS) $(MAIN_SRC).tex 2>&1 | ./colorize.py $(COLORIZE_MAPPING) || { echo $(BOLD_RED)"FAILURE!"$(DEFAULT); exit 1; }

	@echo $(BOLD_BLUE)"Building bibliography..."$(DEFAULT)
	$(BIBTEX_CC) $(BIBTEX_FLAGS) $(BUILD_FOLDER)/$(MAIN_SRC).aux | ./colorize.py $(COLORIZE_MAPPING)
	
	@echo $(BOLD_BLUE)"Compiling second time..."$(DEFAULT)
	$(LATEX_CC) $(LATEXT_STANDARD_FLAGS) $(LATEX_FLAGS) $(MAIN_SRC).tex | ./colorize.py $(COLORIZE_MAPPING) || { echo $(BOLD_RED)"FAILURE!"$(DEFAULT); exit 1; }

	@echo $(BOLD_BLUE)"Compiling third time..."$(DEFAULT)
	$(LATEX_CC) $(LATEXT_STANDARD_FLAGS) $(LATEX_FLAGS) $(MAIN_SRC).tex | ./colorize.py $(COLORIZE_MAPPING) || { echo $(BOLD_RED)"FAILURE!"$(DEFAULT); exit 1; }
	
	@if test "$(BUILD_FOLDER)/$(MAIN_SRC).pdf" != "$(BUILD_FOLDER)/$(OUTPUT_NAME).pdf"; then	mv -v $(BUILD_FOLDER)/$(MAIN_SRC).pdf $(BUILD_FOLDER)/$(OUTPUT_NAME).pdf; fi

	@echo $(BOLD_GREEN)"DONE COMPILING. Check $(BUILD_FOLDER)/$(OUTPUT_NAME).pdf"$(DEFAULT)
	
release: all
	@mkdir -pv $(RELEASE_FOLDER)
	@if test -e $(VERSION_FILE); \
	then \
		echo "version file exists"; \
	else \
		echo "Creating version file..."; \
		echo -n "0" > $(VERSION_FILE); \
	fi

	@echo "Old version to replace is `cat $(VERSION_FILE)`"
	@expr 1 + `cat $(VERSION_FILE)` > $(VERSION_FILE)
	@cp -v $(BUILD_FOLDER)/$(OUTPUT_NAME).pdf "$(RELEASE_FOLDER)/$(RELEASE_NAME)_`cat $(VERSION_FILE)`.0.0.pdf"
	@echo $(BOLD_GREEN)"DONE RELEASING VERSION `cat $(VERSION_FILE)`.0.0. It's available in $(RELEASE_FOLDER) folder."$(DEFAULT)
	

clean:
	rm -rfv $(BUILD_FOLDER)/*
	@echo $(BOLD_GREEN)"DONE CLEANING"$(DEFAULT)


